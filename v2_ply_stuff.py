from plyfile import PlyData, PlyElement
import numpy as np
import pandas as pd

""" 
Contents of the gaussian splat PLY:

ply
format binary_little_endian 1.0
comment Generated by Nerstudio 1.1.5
comment Vertical Axis: z
element vertex 500478
property float x
property float y
property float z
property float nx
property float ny
property float nz
property float f_dc_0
property float f_dc_1
property float f_dc_2
property float opacity
property float scale_0
property float scale_1
property float scale_2
property float rot_0
property float rot_1
property float rot_2
property float rot_3
end_header

The goal is to add class_id to the PLY file: 

- Option 1: property list uchar float class_id. Problem: can't memory map list properties unless they have fixed size. In a pandas dataframe, it's more efficient to have multiple dataframe columns for each class_id anyway.
- Option 2: multiple class_id properties, e.g., class_id_0, class_id_1, class_id_2, etc. Enforces limited amount of classes, and requires deciding how the classes are determined (top 5 classes with highest similarity score?). Most efficient for memory mapping and dataframes.

At first, we implement Option 2, assuming 3 classes.
"""

# Path to files
gaussian_ply = "../data/.temp/splat.ply"  # 500k vertex, pos + normal + opacity + scale + rotation etc

# Read inputs
plydata = PlyData.read(gaussian_ply)

# # Dummy class_id dataframe
# def create_dummy_class_id_df():
#     # class_id=0 -> no class, or 'other'.
#     data = {
#         'vertex_index': [0, 1, 2, 3, 4],
#         # 'class_0': [0, 1, 1, 1, 2],
#         # 'class_1': [0, 0, 2, 2, 0],
#         # 'class_2': [0, 0, 0, 3, 0],
#         'class_id': [
#             [1.0],
#             [1.0],
#             [1.0, 2.0],
#             [1.0, 2.0, 3.0],
#             []
#         ]
#     }
#     df = pd.DataFrame(data)
#     df.to_csv("dummy_vertex_classes.csv", index=False, float_format="%.2f")
#     return df
# class_id_df = create_dummy_class_id_df()

vertex_count = plydata['vertex'].count

class_id_df = pd.read_csv("clusters_info.csv")
class_id_df['class_id'] = [1.0] * len(class_id_df)

class_id_np = np.empty(vertex_count, dtype=object)


# Initialize all as empty list
for i in range(vertex_count):
    class_id_np[i] = []

# Fill in known class_ids
for _, row in class_id_df.iterrows():
    idx = int(row['index'])
    class_id_np[idx] = [row['class_id']]  # wrap it as a list

print('class_id_np:', class_id_np)

# TODO: add option to convert class_id from int to float, and save it to ply as property list uchar float class_id (for use with CloudCompare).

old_vertices = plydata['vertex'].data


# Extend dtype
old_dtype = old_vertices.dtype.descr  # list of (name, type)
extended_dtype = old_dtype + [('class_id', object)]  # list properties must be object dtype

# Create array with extended data
new_vertex_array = np.empty(vertex_count, dtype=extended_dtype)
for name in old_vertices.dtype.names:
    new_vertex_array[name] = old_vertices[name]
new_vertex_array['class_id'] = class_id_np  # Assume all indices have at least an empty list of class ids

# New PlyElement first
new_vertex_el = PlyElement.describe(
    new_vertex_array,
    'vertex',
    comments=plydata['vertex'].comments
)

# New PlyData with created PlyElement
new_plydata = PlyData(
    [new_vertex_el],
    text=True
)

new_plydata.write('output_with_class_id.ply')